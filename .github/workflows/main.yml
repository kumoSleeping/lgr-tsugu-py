name: Build and Upload Executable (PyInstaller matrix)

on:
  push:
    branches: [ main ]
    paths: [ 'version.txt' ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.name }}
    strategy:
      matrix:
        include:
          - name: windows-amd64
            runner: windows-latest
            artifact: dist-windows-amd64
            build_cmd: "python -m PyInstaller --onefile bot/__main__.py --icon=./ico.ico --distpath ./dist --workpath ./build"
          - name: linux-amd64
            runner: ubuntu-latest
            artifact: dist-linux-amd64
            build_cmd: "python -m PyInstaller --onefile bot/__main__.py --distpath ./dist --workpath ./build"
          - name: macos-arm64
            runner: macos-latest
            artifact: dist-macos-arm64
            build_cmd: "python -m PyInstaller --onefile bot/__main__.py --icon=./ico.ico --distpath ./dist --workpath ./build"
    runs-on: ${{ matrix.runner }}
    env:
      PYTHONUTF8: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install tsugu
          pip install tarina
          pip install git+https://github.com/LagrangeDev/lagrange-python@broken

      - name: Build with PyInstaller
        run: ${{ matrix.build_cmd }}

      - name: List dist output
        run: |
          echo "Contents of dist:"
          ls -la dist || true

      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: dist
          retention-days: 1

  create_release:
    name: Create Release and upload artifacts
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set VERSION
        run: |
          echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Package artifacts for release
        run: |
          set -e
          VERSION=${{ env.VERSION }}
          cd artifacts
          
          # Package each artifact
          for artifact_dir in */; do
            if [ -d "$artifact_dir" ]; then
              artifact_name=$(basename "$artifact_dir")
              echo "Processing artifact: $artifact_name"
              cd "$artifact_dir"
              if [ -f "__main__.exe" ]; then
                # Windows executable
                zip "../${artifact_name}-${VERSION}.zip" "__main__.exe"
              elif [ -f "__main__" ]; then
                # Linux/Mac executable
                zip "../${artifact_name}-${VERSION}.zip" "__main__"
              else
                # Package entire directory if no single executable found
                cd ..
                zip -r "${artifact_name}-${VERSION}.zip" "$artifact_dir"
                cd "$artifact_dir"
              fi
              cd ..
            fi
          done
          
          ls -la *.zip || echo "No zip files found"

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
          files: artifacts/*.zip
          token: ${{ secrets.GITHUB_TOKEN }}
