name: Build and Upload Executable (PyInstaller matrix)

on:
  push:
    branches: [ main ]
    paths: [ 'version.txt' ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.name }}
    strategy:
      matrix:
        include:
          - name: windows-amd64
            runner: windows-latest
            artifact: windows-amd64
            build_cmd: "python -m PyInstaller --onefile --name tsugu bot/__main__.py --icon=./ico.ico --distpath ./dist --workpath ./build"
          - name: linux-amd64
            runner: ubuntu-latest
            artifact: linux-amd64
            build_cmd: "python -m PyInstaller --onefile --name tsugu bot/__main__.py --distpath ./dist --workpath ./build"
          - name: macos-arm64
            runner: macos-latest
            artifact: macos-arm64
            build_cmd: "python -m PyInstaller --onefile --name tsugu bot/__main__.py --icon=./ico.ico --distpath ./dist --workpath ./build"
    runs-on: ${{ matrix.runner }}
    env:
      PYTHONUTF8: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install tsugu
          pip install tarina
          pip install git+https://github.com/LagrangeDev/lagrange-python@broken

      - name: Build with PyInstaller
        run: ${{ matrix.build_cmd }}

      - name: List dist output (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Contents of dist (Windows):"
          if (Test-Path dist) { Get-ChildItem dist -Recurse | Format-List -Property FullName,Length } else { echo 'dist folder not found' }

      - name: List dist output (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "Contents of dist (Unix):"
          ls -la dist || true
          find dist -maxdepth 2 -type f -print || true

      - name: Rename artifact (Windows)
        if: runner.os == 'Windows'
        run: |
          $src = "dist/tsugu.exe"
          if (Test-Path $src) { Move-Item $src "dist/tsugu-${{ matrix.name }}.exe" } else { Write-Host "Source exe not found"; Get-ChildItem dist }
          Get-ChildItem dist

      - name: Rename artifact (Unix)
        if: runner.os != 'Windows'
        run: |
          set -e
          if [ -f dist/tsugu ]; then mv dist/tsugu dist/tsugu-${{ matrix.name }}; fi
          ls -l dist || true

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: |
            dist/tsugu-${{ matrix.name }}*
          if-no-files-found: error
          retention-days: 1

  create_release:
    name: Create Release and upload artifacts
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set VERSION
        run: |
          echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare executables (add version to filename)
        run: |
          set -e
          VERSION="${{ env.VERSION }}"
          echo "Processing artifacts for version: $VERSION"
          
          # Find and rename executables
          find artifacts -type f -name 'tsugu-*' -print0 | while IFS= read -r -d '' f; do
            if [ -f "$f" ]; then
              dir=$(dirname "$f")
              base=$(basename "$f")
              echo "Processing: $base"
              
              # Extract platform and extension
              case "$base" in
                tsugu-windows-amd64.exe)
                  new="$dir/tsugu-windows-amd64-$VERSION.exe"
                  ;;
                tsugu-linux-amd64)
                  new="$dir/tsugu-linux-amd64-$VERSION"
                  ;;
                tsugu-macos-arm64)
                  new="$dir/tsugu-macos-arm64-$VERSION"
                  ;;
                *)
                  echo "Unknown file: $base, skipping"
                  continue
                  ;;
              esac
              
              mv "$f" "$new"
              echo "Renamed: $base -> $(basename "$new")"
            fi
          done
          
          echo "Final artifacts:"
          find artifacts -type f -name 'tsugu-*' | sort

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
          files: artifacts/tsugu-*-${{ env.VERSION }}*
          token: ${{ secrets.GITHUB_TOKEN }}
