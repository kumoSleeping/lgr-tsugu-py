name: Build and Upload Executable (PyInstaller matrix)

on:
  push:
    branches: [ main ]
    paths: [ 'version.txt' ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.name }}
    strategy:
      matrix:
        include:
          - name: windows-amd64
            runner: windows-latest
            artifact: windows-amd64
            build_cmd: "python -m PyInstaller --onefile --name tsugu bot/__main__.py --icon=./ico.ico --distpath ./dist --workpath ./build"
          - name: linux-amd64
            runner: ubuntu-latest
            artifact: linux-amd64
            build_cmd: "python -m PyInstaller --onefile --name tsugu bot/__main__.py --distpath ./dist --workpath ./build"
          - name: macos-arm64
            runner: macos-latest
            artifact: macos-arm64
            build_cmd: "python -m PyInstaller --onefile --name tsugu bot/__main__.py --icon=./ico.ico --distpath ./dist --workpath ./build"
    runs-on: ${{ matrix.runner }}
    env:
      PYTHONUTF8: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install certifi
          pip install httpx
          pip install tsugu
          pip install tarina
          pip install "git+https://github.com/LagrangeDev/lagrange-python@broken"

      - name: Build executable
        shell: bash
        run: |
          cd bot
          echo "Current directory: $(pwd)"
          echo "Files in bot directory:"
          ls -la
          echo "Running PyInstaller..."
          python -m PyInstaller --onefile --name tsugu-${{ matrix.name }} \
            --collect-data tarina \
            --collect-submodules tarina \
            --collect-data nepattern \
            --collect-submodules nepattern \
            --collect-data arclet.alconna \
            --collect-submodules arclet.alconna \
            --collect-data certifi \
            --collect-data ssl \
            --hidden-import=tarina.lang \
            --hidden-import=tarina.i18n \
            --hidden-import=nepattern.i18n \
            --hidden-import=arclet.alconna.i18n \
            --hidden-import=certifi \
            --hidden-import=ssl \
            --hidden-import=_ssl \
            --hidden-import=httpx \
            --hidden-import=httpx._client \
            --hidden-import=httpx._config \
            __main__.py
          echo "PyInstaller completed, checking output:"
          ls -la dist/ || echo "dist directory not found"

      - name: List dist output (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Contents of dist (Windows):"
          if (Test-Path bot/dist) { Get-ChildItem bot/dist -Recurse | Format-List -Property FullName,Length } else { echo 'bot/dist folder not found' }

      - name: List dist output (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "Contents of dist (Unix):"
          ls -la bot/dist || echo "bot/dist not found"
          find bot/dist -maxdepth 2 -type f -print || echo "No files found in bot/dist"

      - name: Rename artifact (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Files in bot/dist after build:"
          Get-ChildItem bot/dist || echo "bot/dist not found"
          # File should already be named correctly from PyInstaller --name option

      - name: Rename artifact (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "Files in bot/dist after build:"
          ls -la bot/dist || echo "bot/dist not found"
          # File should already be named correctly from PyInstaller --name option

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: |
            bot/dist/tsugu-${{ matrix.name }}*
          if-no-files-found: error
          retention-days: 1

  create_release:
    name: Create Release and upload artifacts
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set VERSION
        run: |
          echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare executables for release
        run: |
          VERSION="${{ env.VERSION }}"
          # Rename executables with version
          for f in artifacts/*/tsugu-*; do
            if [ -f "$f" ]; then
              base=$(basename "$f")
              case "$base" in
                tsugu-windows-amd64.exe)
                  mv "$f" "artifacts/tsugu-windows-amd64-$VERSION.exe"
                  ;;
                tsugu-linux-amd64)
                  mv "$f" "artifacts/tsugu-linux-amd64-$VERSION"
                  ;;
                tsugu-macos-arm64)
                  mv "$f" "artifacts/tsugu-macos-arm64-$VERSION"
                  ;;
              esac
            fi
          done
          echo "Final files:"
          ls -la artifacts/tsugu-*

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
          files: artifacts/tsugu-*-${{ env.VERSION }}*
          token: ${{ secrets.GITHUB_TOKEN }}
